parser checks to see what the verb is

2) if verb = POST && path.include? /start_game
 A) start Game.new -- > initializes with a random number and an empty guesses array, i.e. @guess, @randnum.
 B) client.puts "Good Luck!"
 C) start_game --> probably a method call

3) if verb = POST && path.include? /game?guess=number(a string)
 A) shovel the guess (number which is a string) into empty array initialized as such in our instance of Game.new
 (Game.new.guess) -- > This can hold all the guesses, simply adding the most recent to the array, then to check
  that one do guesses[-1], and we can also count this way

 B) send the user a redirect response
     -the redirect response prompts the client to send a GET request with path /game(no parameter)
         -GET to GAME


           I.) puts how many guesses have been taken in at 3.A
           II.) checks the single item which is now in the Game.new.guess array and compares it with Game.new.randnum
             i.) if Game.new.guess < Game.new.randnum
                 puts Game.new.randnum (so we can see what it is in terminal)
                 client.puts "Your guess is too low."
             ii.) elsif Game.new.guess > Game.new.randnum
                 puts Game.new.randnum (so we can see what it is in terminal)
                 client.puts "Your guess is too high."
             iii.) elsif Game.new.guess == Game.new.randnum
                 puts Game.new.randnum (so we can see what it is in terminal)
                 client.puts "Your guess is correct."
------------
